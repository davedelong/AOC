#!/usr/bin/xcrun --toolchain default swift

import Foundation

let today = Date()
let calendar = Calendar(identifier: .gregorian)

let day = calendar.component(.day, from: today)
let month = calendar.component(.month, from: today)
let year = calendar.component(.year, from: today)
let todayString = "\(month)/\(day)/\(year % 100)"

let u = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
let sources = u.appendingPathComponent("Sources")
let yearFolder = sources.appendingPathComponent("AOC\(year)")

print("Creating \(yearFolder.path)")

mkdir(yearFolder)


let mainContents = """
//
//  AOC\(year).swift
//  
//
//  Created by Dave DeLong on \(todayString).
//

import Foundation

@_exported import AOCCore

public struct AOC\(year): Year {
    
    public static let days: Array<any Day> = [
        Day1(),
        Day2(),
        Day3(),
        Day4(),
        Day5(),
        Day6(),
        Day7(),
        Day8(),
        Day9(),
        Day10(),
        Day11(),
        Day12(),
        Day13(),
        Day14(),
        Day15(),
        Day16(),
        Day17(),
        Day18(),
        Day19(),
        Day20(),
        Day21(),
        Day22(),
        Day23(),
        Day24(),
        Day25(),
    ]
    
}

"""
mainContents >> yearFolder.appendingPathComponent("AOC\(year).swift")

for day in 1 ... 25 {
    let dayFolder = yearFolder.appendingPathComponent("Day \(day)")
    mkdir(dayFolder)
    
    let dayContents = """
    //
    //  Day\(day).swift
    //  AOC\(year)
    //
    //  Created by Dave DeLong on \(todayString).
    //  Copyright © \(year) Dave DeLong. All rights reserved.
    //

    struct Day\(day): Day {
        typealias Part1 = String
        typealias Part2 = String
        
        static var rawInput: String? { nil }
    
        func run() async throws -> (Part1, Part2) {
            let p1 = try await part1()
            let p2 = try await part2()
            return (p1, p2)
        }
    
        func part1() async throws -> Part1 {
            return #function
        }
    
        func part2() async throws -> Part2 {
            return #function
        }
    
    }
    
    """
    dayContents >> dayFolder.appendingPathComponent("\(year)-Day\(day).swift")
    "" >> dayFolder.appendingPathComponent("input.txt")
}

let testFile = u.appendingPathComponent("Tests").appendingPathComponent("AOCTests").appendingPathComponent("Test\(year).swift")

var contents = """
//
//  Test\(year).swift
//  AOCTests
//
//  Created by Dave DeLong on \(todayString).
//  Copyright © \(year) Dave DeLong. All rights reserved.
//

import XCTest
@testable import AOC\(year)

class Test\(year): XCTestCase {
"""

for day in 1 ... 25 {
    let testContents = """
    
    
        func testDay\(day)() async throws {
            let d = Day\(day)()
            let (p1, p2) = try await d.run()

            XCTAssertEqual(p1, "")
            XCTAssertEqual(p2, "")
        }
    """
    contents += testContents
}

contents += """

}

"""
contents >> testFile

func mkdir(_ path: URL) {
    try? FileManager.default.createDirectory(at: path, withIntermediateDirectories: true, attributes: nil)
}

infix operator >>
func >> (lhs: String, rhs: URL) {
    try! Data(lhs.utf8).write(to: rhs, options: [])
}
